# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-12-29 02:19
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Alias',
            fields=[
                ('id', models.TextField(blank=True, db_column='ID', primary_key=True, serialize=False)),
                ('species', models.TextField(blank=True, null=True)),
                ('gene', models.TextField(blank=True, null=True)),
                ('alias', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'alias',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Fish',
            fields=[
                ('id', models.TextField(blank=True, db_column='ID', primary_key=True, serialize=False)),
                ('gene', models.TextField(blank=True, null=True)),
                ('chr', models.TextField(blank=True, null=True)),
                ('strand', models.TextField(blank=True, null=True)),
                ('genome_coord', models.TextField(blank=True, null=True)),
                ('aa_target', models.TextField(blank=True, null=True)),
                ('codon', models.TextField(blank=True, null=True)),
                ('n_tx_in_gene', models.TextField(blank=True, null=True)),
                ('percent_tx', models.TextField(blank=True, null=True)),
                ('percent_nmd', models.TextField(blank=True, db_column='percent_NMD', null=True)),
                ('rel_pos_largest_isoform', models.TextField(blank=True, null=True)),
                ('no_upstream_g', models.TextField(blank=True, db_column='no_upstream_G', null=True)),
                ('rflp_loss', models.TextField(blank=True, db_column='RFLP_Loss', null=True)),
                ('rflp_gain', models.TextField(blank=True, db_column='RFLP_Gain', null=True)),
                ('sgngg', models.TextField(blank=True, db_column='sgNGG', null=True)),
                ('sgngg_spacing', models.TextField(blank=True, db_column='sgNGG_spacing', null=True)),
                ('sgngg_matches', models.TextField(blank=True, db_column='sgNGG_matches', null=True)),
                ('sgnga', models.TextField(blank=True, db_column='sgNGA', null=True)),
                ('sgnga_spacing', models.TextField(blank=True, db_column='sgNGA_spacing', null=True)),
                ('sgnga_matches', models.TextField(blank=True, db_column='sgNGA_matches', null=True)),
                ('sgngcg', models.TextField(blank=True, db_column='sgNGCG', null=True)),
                ('sgngcg_spacing', models.TextField(blank=True, db_column='sgNGCG_spacing', null=True)),
                ('sgngcg_matches', models.TextField(blank=True, db_column='sgNGCG_matches', null=True)),
                ('sgngag', models.TextField(blank=True, db_column='sgNGAG', null=True)),
                ('sgngag_spacing', models.TextField(blank=True, db_column='sgNGAG_spacing', null=True)),
                ('sgngag_matches', models.TextField(blank=True, db_column='sgNGAG_matches', null=True)),
                ('sgnngrrt', models.TextField(blank=True, db_column='sgNNGRRT', null=True)),
                ('sgnngrrt_spacing', models.TextField(blank=True, db_column='sgNNGRRT_spacing', null=True)),
                ('sgnngrrt_matches', models.TextField(blank=True, db_column='sgNNGRRT_matches', null=True)),
                ('sgnnnrrt', models.TextField(blank=True, db_column='sgNNNRRT', null=True)),
                ('sgnnnrrt_spacing', models.TextField(blank=True, db_column='sgNNNRRT_spacing', null=True)),
                ('sgnnnrrt_matches', models.TextField(blank=True, db_column='sgNNNRRT_matches', null=True)),
            ],
            options={
                'db_table': 'fish',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Fly',
            fields=[
                ('id', models.TextField(blank=True, db_column='ID', primary_key=True, serialize=False)),
                ('gene', models.TextField(blank=True, null=True)),
                ('chr', models.TextField(blank=True, null=True)),
                ('strand', models.TextField(blank=True, null=True)),
                ('genome_coord', models.TextField(blank=True, null=True)),
                ('aa_target', models.TextField(blank=True, null=True)),
                ('codon', models.TextField(blank=True, null=True)),
                ('n_tx_in_gene', models.TextField(blank=True, null=True)),
                ('percent_tx', models.TextField(blank=True, null=True)),
                ('percent_nmd', models.TextField(blank=True, db_column='percent_NMD', null=True)),
                ('rel_pos_largest_isoform', models.TextField(blank=True, null=True)),
                ('no_upstream_g', models.TextField(blank=True, db_column='no_upstream_G', null=True)),
                ('rflp_loss', models.TextField(blank=True, db_column='RFLP_Loss', null=True)),
                ('rflp_gain', models.TextField(blank=True, db_column='RFLP_Gain', null=True)),
                ('sgngg', models.TextField(blank=True, db_column='sgNGG', null=True)),
                ('sgngg_spacing', models.TextField(blank=True, db_column='sgNGG_spacing', null=True)),
                ('sgngg_matches', models.TextField(blank=True, db_column='sgNGG_matches', null=True)),
                ('sgnga', models.TextField(blank=True, db_column='sgNGA', null=True)),
                ('sgnga_spacing', models.TextField(blank=True, db_column='sgNGA_spacing', null=True)),
                ('sgnga_matches', models.TextField(blank=True, db_column='sgNGA_matches', null=True)),
                ('sgngcg', models.TextField(blank=True, db_column='sgNGCG', null=True)),
                ('sgngcg_spacing', models.TextField(blank=True, db_column='sgNGCG_spacing', null=True)),
                ('sgngcg_matches', models.TextField(blank=True, db_column='sgNGCG_matches', null=True)),
                ('sgngag', models.TextField(blank=True, db_column='sgNGAG', null=True)),
                ('sgngag_spacing', models.TextField(blank=True, db_column='sgNGAG_spacing', null=True)),
                ('sgngag_matches', models.TextField(blank=True, db_column='sgNGAG_matches', null=True)),
                ('sgnngrrt', models.TextField(blank=True, db_column='sgNNGRRT', null=True)),
                ('sgnngrrt_spacing', models.TextField(blank=True, db_column='sgNNGRRT_spacing', null=True)),
                ('sgnngrrt_matches', models.TextField(blank=True, db_column='sgNNGRRT_matches', null=True)),
                ('sgnnnrrt', models.TextField(blank=True, db_column='sgNNNRRT', null=True)),
                ('sgnnnrrt_spacing', models.TextField(blank=True, db_column='sgNNNRRT_spacing', null=True)),
                ('sgnnnrrt_matches', models.TextField(blank=True, db_column='sgNNNRRT_matches', null=True)),
            ],
            options={
                'db_table': 'fly',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Humans',
            fields=[
                ('id', models.TextField(blank=True, db_column='ID', primary_key=True, serialize=False)),
                ('gene', models.TextField(blank=True, null=True)),
                ('chr', models.TextField(blank=True, null=True)),
                ('strand', models.TextField(blank=True, null=True)),
                ('genome_coord', models.TextField(blank=True, null=True)),
                ('aa_target', models.TextField(blank=True, null=True)),
                ('codon', models.TextField(blank=True, null=True)),
                ('n_tx_in_gene', models.TextField(blank=True, null=True)),
                ('percent_tx', models.TextField(blank=True, null=True)),
                ('percent_nmd', models.TextField(blank=True, db_column='percent_NMD', null=True)),
                ('rel_pos_largest_isoform', models.TextField(blank=True, null=True)),
                ('no_upstream_g', models.TextField(blank=True, db_column='no_upstream_G', null=True)),
                ('rflp_loss', models.TextField(blank=True, db_column='RFLP_Loss', null=True)),
                ('rflp_gain', models.TextField(blank=True, db_column='RFLP_Gain', null=True)),
                ('cancer_type', models.TextField(blank=True, null=True)),
                ('sgngg', models.TextField(blank=True, db_column='sgNGG', null=True)),
                ('sgngg_spacing', models.TextField(blank=True, db_column='sgNGG_spacing', null=True)),
                ('sgngg_matches', models.TextField(blank=True, db_column='sgNGG_matches', null=True)),
                ('sgnga', models.TextField(blank=True, db_column='sgNGA', null=True)),
                ('sgnga_spacing', models.TextField(blank=True, db_column='sgNGA_spacing', null=True)),
                ('sgnga_matches', models.TextField(blank=True, db_column='sgNGA_matches', null=True)),
                ('sgngcg', models.TextField(blank=True, db_column='sgNGCG', null=True)),
                ('sgngcg_spacing', models.TextField(blank=True, db_column='sgNGCG_spacing', null=True)),
                ('sgngcg_matches', models.TextField(blank=True, db_column='sgNGCG_matches', null=True)),
                ('sgngag', models.TextField(blank=True, db_column='sgNGAG', null=True)),
                ('sgngag_spacing', models.TextField(blank=True, db_column='sgNGAG_spacing', null=True)),
                ('sgngag_matches', models.TextField(blank=True, db_column='sgNGAG_matches', null=True)),
                ('sgnngrrt', models.TextField(blank=True, db_column='sgNNGRRT', null=True)),
                ('sgnngrrt_spacing', models.TextField(blank=True, db_column='sgNNGRRT_spacing', null=True)),
                ('sgnngrrt_matches', models.TextField(blank=True, db_column='sgNNGRRT_matches', null=True)),
                ('sgnnnrrt', models.TextField(blank=True, db_column='sgNNNRRT', null=True)),
                ('sgnnnrrt_spacing', models.TextField(blank=True, db_column='sgNNNRRT_spacing', null=True)),
                ('sgnnnrrt_matches', models.TextField(blank=True, db_column='sgNNNRRT_matches', null=True)),
            ],
            options={
                'db_table': 'humans',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mouse',
            fields=[
                ('id', models.TextField(blank=True, db_column='ID', primary_key=True, serialize=False)),
                ('gene', models.TextField(blank=True, null=True)),
                ('chr', models.TextField(blank=True, null=True)),
                ('strand', models.TextField(blank=True, null=True)),
                ('genome_coord', models.TextField(blank=True, null=True)),
                ('aa_target', models.TextField(blank=True, null=True)),
                ('codon', models.TextField(blank=True, null=True)),
                ('n_tx_in_gene', models.TextField(blank=True, null=True)),
                ('percent_tx', models.TextField(blank=True, null=True)),
                ('percent_nmd', models.TextField(blank=True, db_column='percent_NMD', null=True)),
                ('rel_pos_largest_isoform', models.TextField(blank=True, null=True)),
                ('no_upstream_g', models.TextField(blank=True, db_column='no_upstream_G', null=True)),
                ('rflp_loss', models.TextField(blank=True, db_column='RFLP_Loss', null=True)),
                ('rflp_gain', models.TextField(blank=True, db_column='RFLP_Gain', null=True)),
                ('sgngg', models.TextField(blank=True, db_column='sgNGG', null=True)),
                ('sgngg_spacing', models.TextField(blank=True, db_column='sgNGG_spacing', null=True)),
                ('sgngg_matches', models.TextField(blank=True, db_column='sgNGG_matches', null=True)),
                ('sgnga', models.TextField(blank=True, db_column='sgNGA', null=True)),
                ('sgnga_spacing', models.TextField(blank=True, db_column='sgNGA_spacing', null=True)),
                ('sgnga_matches', models.TextField(blank=True, db_column='sgNGA_matches', null=True)),
                ('sgngcg', models.TextField(blank=True, db_column='sgNGCG', null=True)),
                ('sgngcg_spacing', models.TextField(blank=True, db_column='sgNGCG_spacing', null=True)),
                ('sgngcg_matches', models.TextField(blank=True, db_column='sgNGCG_matches', null=True)),
                ('sgngag', models.TextField(blank=True, db_column='sgNGAG', null=True)),
                ('sgngag_spacing', models.TextField(blank=True, db_column='sgNGAG_spacing', null=True)),
                ('sgngag_matches', models.TextField(blank=True, db_column='sgNGAG_matches', null=True)),
                ('sgnngrrt', models.TextField(blank=True, db_column='sgNNGRRT', null=True)),
                ('sgnngrrt_spacing', models.TextField(blank=True, db_column='sgNNGRRT_spacing', null=True)),
                ('sgnngrrt_matches', models.TextField(blank=True, db_column='sgNNGRRT_matches', null=True)),
                ('sgnnnrrt', models.TextField(blank=True, db_column='sgNNNRRT', null=True)),
                ('sgnnnrrt_spacing', models.TextField(blank=True, db_column='sgNNNRRT_spacing', null=True)),
                ('sgnnnrrt_matches', models.TextField(blank=True, db_column='sgNNNRRT_matches', null=True)),
            ],
            options={
                'db_table': 'mouse',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Nematode',
            fields=[
                ('id', models.TextField(blank=True, db_column='ID', primary_key=True, serialize=False)),
                ('gene', models.TextField(blank=True, null=True)),
                ('chr', models.TextField(blank=True, null=True)),
                ('strand', models.TextField(blank=True, null=True)),
                ('genome_coord', models.TextField(blank=True, null=True)),
                ('aa_target', models.TextField(blank=True, null=True)),
                ('codon', models.TextField(blank=True, null=True)),
                ('n_tx_in_gene', models.TextField(blank=True, null=True)),
                ('percent_tx', models.TextField(blank=True, null=True)),
                ('percent_nmd', models.TextField(blank=True, db_column='percent_NMD', null=True)),
                ('rel_pos_largest_isoform', models.TextField(blank=True, null=True)),
                ('no_upstream_g', models.TextField(blank=True, db_column='no_upstream_G', null=True)),
                ('rflp_loss', models.TextField(blank=True, db_column='RFLP_Loss', null=True)),
                ('rflp_gain', models.TextField(blank=True, db_column='RFLP_Gain', null=True)),
                ('sgngg', models.TextField(blank=True, db_column='sgNGG', null=True)),
                ('sgngg_spacing', models.TextField(blank=True, db_column='sgNGG_spacing', null=True)),
                ('sgngg_matches', models.TextField(blank=True, db_column='sgNGG_matches', null=True)),
                ('sgnga', models.TextField(blank=True, db_column='sgNGA', null=True)),
                ('sgnga_spacing', models.TextField(blank=True, db_column='sgNGA_spacing', null=True)),
                ('sgnga_matches', models.TextField(blank=True, db_column='sgNGA_matches', null=True)),
                ('sgngcg', models.TextField(blank=True, db_column='sgNGCG', null=True)),
                ('sgngcg_spacing', models.TextField(blank=True, db_column='sgNGCG_spacing', null=True)),
                ('sgngcg_matches', models.TextField(blank=True, db_column='sgNGCG_matches', null=True)),
                ('sgngag', models.TextField(blank=True, db_column='sgNGAG', null=True)),
                ('sgngag_spacing', models.TextField(blank=True, db_column='sgNGAG_spacing', null=True)),
                ('sgngag_matches', models.TextField(blank=True, db_column='sgNGAG_matches', null=True)),
                ('sgnngrrt', models.TextField(blank=True, db_column='sgNNGRRT', null=True)),
                ('sgnngrrt_spacing', models.TextField(blank=True, db_column='sgNNGRRT_spacing', null=True)),
                ('sgnngrrt_matches', models.TextField(blank=True, db_column='sgNNGRRT_matches', null=True)),
                ('sgnnnrrt', models.TextField(blank=True, db_column='sgNNNRRT', null=True)),
                ('sgnnnrrt_spacing', models.TextField(blank=True, db_column='sgNNNRRT_spacing', null=True)),
                ('sgnnnrrt_matches', models.TextField(blank=True, db_column='sgNNNRRT_matches', null=True)),
            ],
            options={
                'db_table': 'nematode',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('id', models.TextField(blank=True, db_column='ID', primary_key=True, serialize=False)),
                ('gene', models.TextField(blank=True, null=True)),
                ('chr', models.TextField(blank=True, null=True)),
                ('strand', models.TextField(blank=True, null=True)),
                ('genome_coord', models.TextField(blank=True, null=True)),
                ('aa_target', models.TextField(blank=True, null=True)),
                ('codon', models.TextField(blank=True, null=True)),
                ('n_tx_in_gene', models.TextField(blank=True, null=True)),
                ('percent_tx', models.TextField(blank=True, null=True)),
                ('percent_nmd', models.TextField(blank=True, db_column='percent_NMD', null=True)),
                ('rel_pos_largest_isoform', models.TextField(blank=True, null=True)),
                ('no_upstream_g', models.TextField(blank=True, db_column='no_upstream_G', null=True)),
                ('rflp_loss', models.TextField(blank=True, db_column='RFLP_Loss', null=True)),
                ('rflp_gain', models.TextField(blank=True, db_column='RFLP_Gain', null=True)),
                ('sgngg', models.TextField(blank=True, db_column='sgNGG', null=True)),
                ('sgngg_spacing', models.TextField(blank=True, db_column='sgNGG_spacing', null=True)),
                ('sgngg_matches', models.TextField(blank=True, db_column='sgNGG_matches', null=True)),
                ('sgnga', models.TextField(blank=True, db_column='sgNGA', null=True)),
                ('sgnga_spacing', models.TextField(blank=True, db_column='sgNGA_spacing', null=True)),
                ('sgnga_matches', models.TextField(blank=True, db_column='sgNGA_matches', null=True)),
                ('sgngcg', models.TextField(blank=True, db_column='sgNGCG', null=True)),
                ('sgngcg_spacing', models.TextField(blank=True, db_column='sgNGCG_spacing', null=True)),
                ('sgngcg_matches', models.TextField(blank=True, db_column='sgNGCG_matches', null=True)),
                ('sgngag', models.TextField(blank=True, db_column='sgNGAG', null=True)),
                ('sgngag_spacing', models.TextField(blank=True, db_column='sgNGAG_spacing', null=True)),
                ('sgngag_matches', models.TextField(blank=True, db_column='sgNGAG_matches', null=True)),
                ('sgnngrrt', models.TextField(blank=True, db_column='sgNNGRRT', null=True)),
                ('sgnngrrt_spacing', models.TextField(blank=True, db_column='sgNNGRRT_spacing', null=True)),
                ('sgnngrrt_matches', models.TextField(blank=True, db_column='sgNNGRRT_matches', null=True)),
                ('sgnnnrrt', models.TextField(blank=True, db_column='sgNNNRRT', null=True)),
                ('sgnnnrrt_spacing', models.TextField(blank=True, db_column='sgNNNRRT_spacing', null=True)),
                ('sgnnnrrt_matches', models.TextField(blank=True, db_column='sgNNNRRT_matches', null=True)),
            ],
            options={
                'db_table': 'plant',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Rat',
            fields=[
                ('id', models.TextField(blank=True, db_column='ID', primary_key=True, serialize=False)),
                ('gene', models.TextField(blank=True, null=True)),
                ('chr', models.TextField(blank=True, null=True)),
                ('strand', models.TextField(blank=True, null=True)),
                ('genome_coord', models.TextField(blank=True, null=True)),
                ('aa_target', models.TextField(blank=True, null=True)),
                ('codon', models.TextField(blank=True, null=True)),
                ('n_tx_in_gene', models.TextField(blank=True, null=True)),
                ('percent_tx', models.TextField(blank=True, null=True)),
                ('percent_nmd', models.TextField(blank=True, db_column='percent_NMD', null=True)),
                ('rel_pos_largest_isoform', models.TextField(blank=True, null=True)),
                ('no_upstream_g', models.TextField(blank=True, db_column='no_upstream_G', null=True)),
                ('rflp_loss', models.TextField(blank=True, db_column='RFLP_Loss', null=True)),
                ('rflp_gain', models.TextField(blank=True, db_column='RFLP_Gain', null=True)),
                ('sgngg', models.TextField(blank=True, db_column='sgNGG', null=True)),
                ('sgngg_spacing', models.TextField(blank=True, db_column='sgNGG_spacing', null=True)),
                ('sgngg_matches', models.TextField(blank=True, db_column='sgNGG_matches', null=True)),
                ('sgnga', models.TextField(blank=True, db_column='sgNGA', null=True)),
                ('sgnga_spacing', models.TextField(blank=True, db_column='sgNGA_spacing', null=True)),
                ('sgnga_matches', models.TextField(blank=True, db_column='sgNGA_matches', null=True)),
                ('sgngcg', models.TextField(blank=True, db_column='sgNGCG', null=True)),
                ('sgngcg_spacing', models.TextField(blank=True, db_column='sgNGCG_spacing', null=True)),
                ('sgngcg_matches', models.TextField(blank=True, db_column='sgNGCG_matches', null=True)),
                ('sgngag', models.TextField(blank=True, db_column='sgNGAG', null=True)),
                ('sgngag_spacing', models.TextField(blank=True, db_column='sgNGAG_spacing', null=True)),
                ('sgngag_matches', models.TextField(blank=True, db_column='sgNGAG_matches', null=True)),
                ('sgnngrrt', models.TextField(blank=True, db_column='sgNNGRRT', null=True)),
                ('sgnngrrt_spacing', models.TextField(blank=True, db_column='sgNNGRRT_spacing', null=True)),
                ('sgnngrrt_matches', models.TextField(blank=True, db_column='sgNNGRRT_matches', null=True)),
                ('sgnnnrrt', models.TextField(blank=True, db_column='sgNNNRRT', null=True)),
                ('sgnnnrrt_spacing', models.TextField(blank=True, db_column='sgNNNRRT_spacing', null=True)),
                ('sgnnnrrt_matches', models.TextField(blank=True, db_column='sgNNNRRT_matches', null=True)),
            ],
            options={
                'db_table': 'rat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Yeast',
            fields=[
                ('id', models.TextField(blank=True, db_column='ID', primary_key=True, serialize=False)),
                ('gene', models.TextField(blank=True, null=True)),
                ('chr', models.TextField(blank=True, null=True)),
                ('strand', models.TextField(blank=True, null=True)),
                ('genome_coord', models.TextField(blank=True, null=True)),
                ('aa_target', models.TextField(blank=True, null=True)),
                ('codon', models.TextField(blank=True, null=True)),
                ('n_tx_in_gene', models.TextField(blank=True, null=True)),
                ('percent_tx', models.TextField(blank=True, null=True)),
                ('percent_nmd', models.TextField(blank=True, db_column='percent_NMD', null=True)),
                ('rel_pos_largest_isoform', models.TextField(blank=True, null=True)),
                ('no_upstream_g', models.TextField(blank=True, db_column='no_upstream_G', null=True)),
                ('rflp_loss', models.TextField(blank=True, db_column='RFLP_Loss', null=True)),
                ('rflp_gain', models.TextField(blank=True, db_column='RFLP_Gain', null=True)),
                ('sgngg', models.TextField(blank=True, db_column='sgNGG', null=True)),
                ('sgngg_spacing', models.TextField(blank=True, db_column='sgNGG_spacing', null=True)),
                ('sgngg_matches', models.TextField(blank=True, db_column='sgNGG_matches', null=True)),
                ('sgnga', models.TextField(blank=True, db_column='sgNGA', null=True)),
                ('sgnga_spacing', models.TextField(blank=True, db_column='sgNGA_spacing', null=True)),
                ('sgnga_matches', models.TextField(blank=True, db_column='sgNGA_matches', null=True)),
                ('sgngcg', models.TextField(blank=True, db_column='sgNGCG', null=True)),
                ('sgngcg_spacing', models.TextField(blank=True, db_column='sgNGCG_spacing', null=True)),
                ('sgngcg_matches', models.TextField(blank=True, db_column='sgNGCG_matches', null=True)),
                ('sgngag', models.TextField(blank=True, db_column='sgNGAG', null=True)),
                ('sgngag_spacing', models.TextField(blank=True, db_column='sgNGAG_spacing', null=True)),
                ('sgngag_matches', models.TextField(blank=True, db_column='sgNGAG_matches', null=True)),
                ('sgnngrrt', models.TextField(blank=True, db_column='sgNNGRRT', null=True)),
                ('sgnngrrt_spacing', models.TextField(blank=True, db_column='sgNNGRRT_spacing', null=True)),
                ('sgnngrrt_matches', models.TextField(blank=True, db_column='sgNNGRRT_matches', null=True)),
                ('sgnnnrrt', models.TextField(blank=True, db_column='sgNNNRRT', null=True)),
                ('sgnnnrrt_spacing', models.TextField(blank=True, db_column='sgNNNRRT_spacing', null=True)),
                ('sgnnnrrt_matches', models.TextField(blank=True, db_column='sgNNNRRT_matches', null=True)),
            ],
            options={
                'db_table': 'yeast',
                'managed': False,
            },
        ),
    ]
